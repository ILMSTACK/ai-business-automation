# Notion Integration Setup Guide

## Prerequisites
1. You must have a Notion account
2. You need to create a Notion integration
3. You need to share a page with your integration

## Step 1: Create Notion Integration
1. Go to https://www.notion.so/my-integrations
2. Click "Create new integration"
3. Name it (e.g., "Business Automation Bot")
4. Select your workspace
5. Click "Submit"
6. Copy the "Internal Integration Token" - this is your NOTION_TOKEN

## Step 2: Create a Parent Page (NOT DATABASE)
1. In Notion, create a new PAGE (not a database)
2. Name it something like "Business Automation" or "AI Generated Content"
3. This page will contain your auto-generated databases

## Step 3: Share the Page with Your Integration
1. Open the page you created in Step 2
2. Click "Share" in the top right
3. Click "Invite" and search for your integration name
4. Select your integration and give it "Edit" access
5. Click "Invite"

## Step 4: Get the Page ID
1. On the page from Step 2, click "Share" â†’ "Copy link"
2. The URL looks like: https://notion.so/Your-Page-Name-abc123def456ghi789...
3. The Page ID is the long string after the last dash
4. Example: if URL is https://notion.so/My-Page-256e8c14cc8e80068a63e82f5501066c
5. Then Page ID is: 256e8c14cc8e80068a63e82f5501066c

## Step 5: Update Your .env File
Add these variables to your .env file:

```
# Notion Integration Token (from Step 1)
NOTION_TOKEN=secret_abc123def456ghi789...

# Parent Page ID (from Step 4) - MUST BE A PAGE, NOT A DATABASE
NOTION_PARENT_PAGE_ID=256e8c14cc8e80068a63e82f5501066c

# Optional: If you want to use existing databases instead of creating new ones
# NOTION_TASKS_DATABASE_ID=your-existing-tasks-database-id
# NOTION_TESTCASES_DATABASE_ID=your-existing-test-cases-database-id
```

## Step 6: Restart Your Application
Restart your Flask application to load the new environment variables.

## How It Works
1. When you first create tasks/test cases in Notion, the system will:
   - Create a "Tasks" database under your parent page
   - Create a "Test Cases" database under your parent page
   - Store the database IDs for future use

2. All subsequent tasks and test cases will be added to these databases

## Troubleshooting

### Error: "Can't create databases parented by a database"
- You provided a database ID instead of a page ID
- Make sure NOTION_PARENT_PAGE_ID points to a PAGE, not a database

### Error: "body.parent.page_id should be a valid uuid"
- The page ID format is incorrect
- Make sure you copied just the ID part from the URL

### Error: "Could not find database" or "Unauthorized"
- Your integration doesn't have access to the page
- Make sure you shared the page with your integration (Step 3)

### Error: "The integration does not have permission to perform this action"
- Your integration token is invalid or expired
- Make sure NOTION_TOKEN is correct and the integration still exists

## Testing
Once setup is complete:
1. Create a user story in your app
2. Generate tasks/test cases
3. Use the Notion endpoints to push items to Notion
4. Check your Notion page - you should see new databases with your content

## Optional: Using Existing Databases
If you prefer to create databases manually:
1. Create databases in Notion with the required properties
2. Share them with your integration
3. Get their database IDs from the URLs
4. Set NOTION_TASKS_DATABASE_ID and NOTION_TESTCASES_DATABASE_ID in .env
5. The system will use existing databases instead of creating new ones

### Required Database Properties for Tasks:
- Title (title)
- Description (rich_text)  
- User Story ID (number)
- Assignee (people)
- Priority (select: Low, Medium, High, Critical)
- Status (select: To Do, In Progress, Done, Blocked)
- Estimated Hours (number)
- Labels (multi_select)
- Created Date (created_time)

### Required Database Properties for Test Cases:
- Title (title)
- Description (rich_text)
- User Story ID (number)  
- Steps (rich_text)
- Expected Result (rich_text)
- Priority (select: Low, Medium, High, Critical)
- Type (select: Functional, Performance, Security, Negative, Validation)
- Status (select: Draft, Active, Passed, Failed)
- Created Date (created_time)